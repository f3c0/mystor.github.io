<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom"><title>Nika's Box - webdev</title><link href="https://mystor.github.io/" rel="alternate"></link><link href="https://mystor.github.io/feeds/categories/webdev.atom.xml" rel="self"></link><id>https://mystor.github.io/</id><updated>2014-04-27T08:14:00-04:00</updated><entry><title>ClojureScript + Meteor</title><link href="https://mystor.github.io/clojurescript-meteor.html" rel="alternate"></link><published>2014-04-27T08:14:00-04:00</published><updated>2014-04-27T08:14:00-04:00</updated><author><name>Nika Layzell</name></author><id>tag:mystor.github.io,2014-04-27:/clojurescript-meteor.html</id><summary type="html">&lt;p&gt;A few weeks ago, I released a plugin for Meteor, &lt;a href="https://github.com/mystor/meteor-clojurescript"&gt;meteor-clojurescript&lt;/a&gt;. The goal of this plugin was to make developing with Meteor in ClojureScript as easy as with any of the other languages which Meteor supports. The plugin certainly isn't at that state yet, but it's getting closer.&lt;/p&gt;
&lt;p&gt;Meteor has â€¦&lt;/p&gt;</summary><content type="html">&lt;p&gt;A few weeks ago, I released a plugin for Meteor, &lt;a href="https://github.com/mystor/meteor-clojurescript"&gt;meteor-clojurescript&lt;/a&gt;. The goal of this plugin was to make developing with Meteor in ClojureScript as easy as with any of the other languages which Meteor supports. The plugin certainly isn't at that state yet, but it's getting closer.&lt;/p&gt;
&lt;p&gt;Meteor has a build system which it uses for compiling and aggregating files.  Whenever a file changes, it walks the project's directory structure, calling package-provided callbacks for each file with a specific extension it finds.  This callback can then add raw css and javascript assets to the project, which will be compiled and served.&lt;/p&gt;
&lt;p&gt;This system works very well with compile-to-js languages like CoffeeScript, as they map one source file to one javascript output file. Working with languages with more complicated relationships (such as less files), has always been a bit of a pain point in Meteor (all @imported less files have to be given the extension &lt;code&gt;.lessimport&lt;/code&gt;, as every file with the extension &lt;code&gt;.less&lt;/code&gt; is compiled seperately).  &lt;/p&gt;
&lt;p&gt;Choosing the leiningen &lt;code&gt;project.clj&lt;/code&gt; file which accompanies most ClojureScript projects as the base file to compile, it is possible to fire &lt;code&gt;lein cljsbuild once&lt;/code&gt; every time a file changes, which will cause the clojurescript to be compiled into a file (presumably in an ignored directory), which is then read and provided to Meteor. Unfortunately, this is unacceptably slow. Every time &lt;code&gt;lein cljsbuild once&lt;/code&gt; is called, the JVM has to start up (twice), Clojure has to bootstrap itself, the ClojureScript compiler needs to initialize, the directory structure must be analyzed, and every file must be compiled, then the Google Closure compiler must be run to merge the inputs. On my computer, this would consistently take ~ 60 seconds on a small test project.&lt;/p&gt;
&lt;p&gt;That was unacceptable. Fortunately, the problem of faster compile times had already been, at least partially, solved. The command &lt;code&gt;lein cljsbuild auto&lt;/code&gt; would start the JVM and initialize the ClojureScript compiler, and then watch the directory structure for changes.  Whenever something changed, it would recompile (only the differences), and produce a new output file. Using &lt;code&gt;lein cljsbuild auto&lt;/code&gt;, compilations often only a few seconds (after the initial startup and first compile).&lt;/p&gt;
&lt;p&gt;By configuring leiningen to output the compiled code into a folder watched by Meteor, we could then cause the Meteor asset pipeline to re-run whenever the ClojureScript code was changed. &lt;/p&gt;
&lt;p&gt;However, simply dropping the JS code into the directory structure would be a bad idea, as source maps would not be correctly handled by Meteor, which would make development with ClojureScript much more difficult. In addition, the code generated by the &lt;code&gt;:nodejs&lt;/code&gt; target includes &lt;code&gt;require()&lt;/code&gt; calls, and a shebang at the top of the file, which would cause an error if passed into Meteor.&lt;/p&gt;
&lt;p&gt;To solve this problem, the code outputted by leiningen was given a &lt;code&gt;.cjs&lt;/code&gt; extension, and the sourcemap was outputted into the same directory. A Meteor extension handler was then created for the &lt;code&gt;.cjs&lt;/code&gt; extension, which would both load the source map, and perform the transformations on the code generated by the &lt;code&gt;:nodejs&lt;/code&gt; target.&lt;/p&gt;
&lt;p&gt;The leiningen subprocess was also started when the compiler plugin was loaded, and run in the background, such that a seperate leiningen process would not have to be started for development.&lt;/p&gt;
&lt;p&gt;This works fairly well, and you can use it today (just &lt;code&gt;mrt add clojurescript&lt;/code&gt;), however it has a few problems:
 - Meteor Smart Packages are completely unsupported, every top level project has exactly one ClojureScript compile target, and it is defined by the &lt;code&gt;project.clj&lt;/code&gt; file in the root of the project. This isn't as big of a problem (due to the package system already avaliable through leiningen for ClojureScript), and it does make sense to not have multiple copies of the ClojureScript/Closure core libraries.
 - Explicit control over which files are compiled is needed, rather than the implicit mechanism which is generally used by Meteor, meaning that ClojureScript doesn't feel as much like it is part of the Meteor ecosystem
 - Advanced compilation is not yet fully supported, as an externs file for Meteor hasn't been made, so any calls to the Meteor APIs will be munged
 - The compiler creates intermediate files on the disk within the project directory&lt;/p&gt;
&lt;p&gt;However, the potential in using Meteor's powerful reactivity API with the expressive power of ClojureScript is great. I can only see the plugin getting better as I gain familiarity with ClojureScript and the Meteor plugin system. For example, I have done some initial work on a hiccup-style templating interface for meteor-clojurescript, and it is turning out quite well.&lt;/p&gt;</content><category term="meteor"></category><category term="clojure"></category><category term="clojurescript"></category><category term="integration"></category></entry></feed>